===================对话系统测试===================
对话系统测试：
模块测试：运行游戏，按B弹出对话框，空格进入下一句。
API调用说明：
在Resources / SO / Dialogue_SO 文件中编辑好对话内容后，点击序列化 (详情见对话系统使用说明) 。
直接在需要弹出对话的逻辑语块中 调用 ！！！DialogueManager.Instance.ShowDialogue(int pos); ！！！
传入的Pos即为 在SO文件中的pos值。


===================Buff系统测试===================
Buff系统测试：
模块测试：运行游戏，按N弹出主UI界面，Q / W / E 分别添加三类Buff。
API调用说明：
在Resources / SO / Buff_SO 文件中编辑好Buff内容后，点击序列化 (与对话系统操作相同) 。
直接在需要添加Buff的逻辑语块中 调用 ！！！BuffManager.Instance.AddBuff(int id, UnityAction callback); ！！！
- 1. 传入的id即为 在SO文件中的id值。
- 2. 传入的callback即为 Buff的具体效果。(测试效果为打印)


===================背包系统测试===================
背包系统测试：
模块测试：运行游戏，按N弹出主UI界面，R / T / Y 分别添加三类物品，按 U 消耗1个蓝水晶。
API调用说明：
在Resources / SO / Inventory_SO 文件中编辑好物品内容后，点击序列化 (与对话系统操作相同) 。
直接在需要添加物品的逻辑语块中 调用 ！！！InventoryManager.Instance.AddItem(int id, int num); ！！！
消耗物品同理，调用 ！！！InventoryManager.Instance.ConsumeItem(string name, int num);！！！
- 1. 添加传入的id即为 物品在SO文件中的id值。
- 2. 添加 / 消耗 传入的num即为 要添加物品的个数。(测试效果为打印)
- 3. 消耗传入的name即为物品的Name字段。


===================提示系统测试===================
提示系统测试：
模块测试：运行游戏，直接点击右上角 “Notes” 显示随机提示面板，按 ESC 退出面板。
API调用说明：
在Resources / SO / Tip_SO 文件中编辑好提示内容后，点击序列化 (与对话系统操作相同) 即可。
